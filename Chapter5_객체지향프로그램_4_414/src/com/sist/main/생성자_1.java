package com.sist.main;
/*
 *    자바 클래스의 구성 -> 객체지향 특성(접근지정어, 캡슐화, 재사용, 수정, 추가)
 *                     public / protected /default / private
 *                     1. 변수 2. 메소드 3. 생성자
 *                     1. 캡슐화 데이터 보호 모든 변수는 private
 *                     2. 재사용 : 변경해서 사용, 있는 그대로 상속(is-a) 포함(has-a)
 *                     3. 수정 : 오버라이딩, 추가 : 오버로딩
 *    class ClassName
 *    {
 *       변수
 *       1) 멤버변수(인스턴스변수) -> new 메모리에 저장할때 따로 저장되는 변수
 *          형식) [접근지정어] 데이터형 변수명 = 값 (디폴트값)
 *               int a; -> 0
 *               int a=10; //명시적 초기화, 선언과 동시에 초기화
 *               
 *               
 *               ->int a; -> a=10; -> 이러면 오류 클래스내에서는 구현이 안됨
 *               ->변수를 초기화 해줘야 하는데 이때 사용되는게 (생성자)
 *               
 *               ->생성시점 : new를 이용해서 메모리 공간이 확보
 *               ->소멸시점 : 객체null이거나 사용하지 않는경우 가비지 컬렉션(GC)으로 메모리 회수
 *               가장 많이 사용되는 변수(여러개를 저장)
 *       
 *       2) 정적변수(클래스변수, 공유변수) -> 한개의 공간만 생성
 *          공유변수 : 오라클
 *          형식) static 데이터형 변수명 = 값(디폴트)
 *               int = 0;
 *               double 0.0;
 *               boolean -> false;
 *               string, 배열, 클래스 -> null(주소가 저장이 안된상태)
 *               -> 생성시점 : 컴파일러에 의해 자동으로 메모리에 저장된다
 *               -> new가 없어도 사용이 가능
 *               사용법)
 *               Class A
 *               {
 *                 int age; // 0
 *                 String name; // null
 *               }
 *               A a=new A(); -> age, name
 *                 -
 *                 객체, 인스턴스(메모리에 저장된 상태)
 *               A b=new A(); -> b.age b.name
 *               class는 한개만 설계 저장은 new를 이용해서 여러개
 *               
 *               b=a 이럴경우 a의 주소값이 대입되게됨 b의 객체들 age, name은 GC를 통해서 사라짐
 *               -> 저장된 데이터의 위치가 변경 될 수 있다.(데이터 손실) -> 메모리 주소 복구가 어렵다
 *       
 *       생성자 : 
 *          1. 객체가 생성될때 호출 메소드
 *             A a=new A()
 *          
 *          
 *          2. 특징
 *             = 클래스명과 동일
 *             = 리턴타입이 없다
 *             = 생성자가 없는 경우에 추가(매개변수가 없는 생성자가 추가) -> 기본생성자
 *             = 멤버변수의 초기화
 *             = 생성자는 여러개 사용이 가능하다
 *             = 자동추가
 *             import java.lang.*;
 *                    -------String, Math, System
 *             class A extends Object
 *             생성자 : 기본생성자()
 *             return void(자동)
 *             
 *             class A
 *             {
 *                A(){} -> 생성자O
 *                void A(){} --> 얘는 생성자 아님 일반 함수임 void가 생략이긴하나 명시적으로 사용x
 *                A(int a){} -> 생성자O
 *                A(int a, int b){} -> 생성자O
 *             }
 *          
 *          3. 역할
 *             = 시작과 동시에 처리
 *             예) 자동 로그인
 *                오라클 연결
 *                서버 연결...
 *                =멤버 변수의 초기화
 *                =구현해서 초기화
 *                //파일읽기 크롤링
 *                필요시마다
 *          
 *       메소드
 *          1.역할 -> 다른 클래스 클래스와 통신(연결)
 *          2.수정, 추가(오버라이딩, 오버로딩)
 *          3.반복제거
 *          4.구조적인 프로그램 단락을 나눠서 처리 -> 오류, 수정 용이
 *          5.메소드는 호출시마다 처음부터 끝까지
 *          6.구성요소
 *             결과값(리턴타입)
 *                클래스 : 다른 데이터형 여러개를 리턴시킬때
 *                String, 사용자 정의
 *                ->클래스 -> 배열로 사용이 가능(데이터형)
 *                ->기본형(자바에서 지원 -> 지원하지 않는것이 많다)
 *                  프로그래머가 만들어서 처리 -> 클래스 -> 클래스의 기능임! 사용자 원하는대로 정의
 *                  형변환, 대입 모두 가능(기본형과 동일하게 사용할 수 있다.)
 *                 
 *             메소드명 : 식별자 -> 변수, 클래스, 인터페이스, 메소드 등등.. 이름지정하는 규칙 권장사항
 *             			변수, 메소드 -> 소문자
 *             			클래스, 인터페이스 -> 대문자 
 *             			문자길이는 상관없다
 *             			한글보다는 영어권장 -> linux에서 깨짐
 *             
 *                   메소드 유형
 *                      ->리턴타입(없거나 한개만 존재) -> 여러개면 배열, 클래스
 *                      ->매개변(없거나, 한개이상)
 *                   
 *                   메소드 형식
 *                      [접근지정어][옵션]리턴타입 메소드명(매개변수...) -> 선언부
 *                      {            -----        -------
 *                                   결과값         사용자요청값
 *                         옵션 : static, abstract, final
 *                         구현부
 *                         연산/제어
 *                         return 값; -> void일경우에는 생략이 가능
 *                      }
 *                      
 *             
 *             매개변수(사용자 요청)
 *             ***사용자의 요청값을 받아서 요청 처리 결과를 도출
 *             ***최소화 시킨다(3개이상이면 -> 배열, 클래스)
 *             ex) 정수 10개를 보내주고 정렬후 달라 -> int[] arr
 *             
 *       
 *    }
 */

public class 생성자_1 {

	public static void main(String[] args) {
		생성자_1 a = new 생성자_1();
		// TODO Auto-generated method stub
		System.out.println(a.toString());
	}

}
