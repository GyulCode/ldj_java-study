package com.sist.temp2;
/*  0508-월
 *   
 *   자바 정리 - 웹 관련 25page
 *   메모리에 저장되는 시점, 초기화 되는 시점
 *   ---------------------------------------
 *   멤버변수				프로그램 종료시 까지사용
 *   (인스턴스 변수)        메모리 할당
 *   					new 사용 / Class.forName()
 *   
 *   class ClassName
 *   {
 *      [접근지정어] 데이터형 변수명
 *      --------
 *      데이터 보호를 목적으로 사용, 은닉화, 보통은 private
 *   }
 *   
 *   변수 -> 메모리에 저장 / 읽기
 *                ---   ---
 *                쓰기    읽기
 *                getter setter
 *   사용법
 *   클래스 객체명=new 클래스명();
 *   객체명.변수명
 *   객체=인스턴스->동일개념
 *   -------------------------------------------
 *   정적변수                   컴파일러가 컴파일             프로그램 종료시까지 사용가능
 *   (공유변수, 클래스변수)        JVM이 클래스 읽기 -> 메모리에 자동할당
 *   
 *   -> 메모리 할당없이 사용이 가능
 *   -> 클래스명, 변수명
 *   -> 여러명이 같은 변수를 이용할때 주로 사용
 *      웹 -> 로고, 이미지 크기
 *      서버-> 클라이언트 정보(IP)
 *      오라클(MySQL 데이터베이스) -> 공유 (저장된 데이터는 static)
 *   --------------------------------------------
 *   지연변수(25page) -> 메소드가 호출될때 메소드안에서만 사용이 가능
 *   변수 : 한개의 데이터를 저장하는 공간
 *   우선 -> 변수명이 동일할때 우선 순위
 *   -> 지역변수, 매개변수
 *      -----반드시 초기화후에 사용해야한다
 *                ------1)명시적 초기화 int a=10;
 *                      2)입력값을 받는방법
 *                      3)난수 발생(임의로)
 *   --------------------------------------------                   
 *   메모리 공간에 저장 -> 종류(데이터형)
 *   -> 변수 (70%) -> 제어문, 연산자
 *   정수형
 *        byte : 네트워크 통신, 파일 입출력, 웹
 *               asc코드를 주로 사용(char:1byte)
 *               한글 -> 멀티바이트 (char:2byte) -> unicode -> utf-8
 *               사용범위 -> -128~127
 *         웹프로그래머 : 자바80%, 오라클20%
 *         웹 브라우저 언어 : 자바, C#, C/C++, 파이썬
 *         오라클 자바 연결이 필요
 *         
 *         자격조건 : 스프링 가능자, 오라클 가능자
 *                 ----자바포함(스프링은 자바의 라이브러리)
 *                 -> 어노테이션, 디자인 패턴, xml파싱
 *                 -> 스프링(5,6)-> 프레임워크 / 부트
 *        int : default -> 컴퓨터에서 인식하는 숫자(int)
 *              가장많이 사용되는 정수형
 *              웹/윈도우는 정수를 인식하지 못한다(문자열)
 *              -> 정수 변환 : Integer.parseInt("10")
 *              -> 사용범위 : -21억 4천 ~
 *              
 *        long : 빅데이터, 금융권, 회계(국세청)
 *   --------------------------------------------
 *   실수형
 *        double : 소수점 15자리 이상 사용
 *        컴퓨터 인식은 실수일 경우 default
 *   --------------------------------------------
 *   논리형 : true/false 저장 -> 조건 제어문에 사용
 *          boolean                             
 *   --------------------------------------------
 *   문자형 : char (2byte) -> unicode
 *          문자 표현이 많다 -> 각국언어 사요이 가능 / 한글은 2byte
 *          모아서 사용 -> string
 *   --------------------------------------------
 *   참조형 : 주소를 이용해서 데이터 관리
 *          배열 -> 같은 데이터형만 저장이 가능
 *          클래스 -> 다른 데이터형을 저장 가능
 *   --------------------------------------------
 *   
 *   기본형의 크기
 *   byte < int < long < double 형변환  //(boolean 제외)
 *   -------------------------------------------- 30page
 *   변수 생성 방법(식별자) -> 같은 메소드상에서는 같은 변수가 존재하지 않는다.
 *   = 식별자
 *      1) 알파벳/한글 사용 (대소문자 구분)
 *      2) 숫자 사용 가능 단 맨앞은 안됨
 *      3) 특숨누자 _, $ 는 사용가능
 *      4) 키워드는 사용 불가
 *      5) 공백 안됨
 *   --------------------------------------------오라클, 자바스크립드 동일
 *      오라클 (변수->컬럼), 자바스크립트는 자동지정변수
 *                       ES6 -> let, const
 *                       let a=10 a:int
 *                       let a=10.5 a:double
 *                       const : final
 *   *약속사항
 *    클래스명은 대문자 사용, 인터페이스 포함
 *    메소드명, 변수명은 소문자로 시작
 *    두개 이상의 단어는 헝가리안 표기법(첫단어 대문자) FileName
 *    -------------------------------------------- 25~37page
 *    데이터 저장  --->  데이터 처리   --->  데이터 출력
 *    -------
 *    변수             연산처리(연산자)
 *    배열/클래스        제어처리(제어문)
 *                    ------
 *                    메소드
 *    --------------------------------------------                
 *    자바에서 지원하는 연산자 ( 피연산자/연산자)
 *    단항연산자
 *    -> 피연산자가 한개일때
 *    -> 증감연산자(++,--)
 *       1) 전위 ++a
 *       2) 후위 a++
 *       
 *       오라클은 ++, --는 존재하지 않는다
 *    -> 부정연산자 : ! -> boolean으로 표현
 *               -> 오라클 : NOT, <>
 *    -> 형변환연산자 : (데이터형) 변수앞에 설정한다
 *                  단 boolean은 사용이 불가
 *                  클래스의 형변환
 *                  모든 데이터형을 통합이 가능 : Object 
 *    
 *    이항연산자
 *       산술연산자 : 가장 많이 사용되는 연산자
 *       +,-,*,/,%
 *       %연산자의 부호는왼쪽 연산자를 따라간다 -5%3  => -2
 *       비교 연산자 : 조건문 -> 계산 결과 : boolean
 *       ==, !=, <, >, <=, >=,
 *       -----------
 *       오라클 : =, <>, ^=
 *       JS : ===, !==
 *       
 *       논리연산자 : &&(직렬) -> 두개가 true 일때 true
 *                ||(병렬) -> 둘중에 1개가 true일때 true
 *                **연산 생략의 메커니즘이 있다 and의 경우 앞이 거짓이면 뒤는 연산생략 or는 앞이 참이면 안함
 *       대입 연산자 : a+=10 -> a=a+10
 *       
 *       vuejs./reactjs 3200~
 *    
 *    삼항연산자 : 웹에서 종종 사용 if else를 줄일때 사용
 *    A:B ? true : false 
 *    
 *    자바에서 제공하는 제어문
 *    프로그램명에 따라 
 *    소스를 건너뛸 수도 있고 아닐수도
 *    조건문 
 *        단일 : 독립적 수행문자 (조건마다 따로 수행)
 *        형식) 
 *           if(조건문) -> 조건문에 사용되는 연산자
 *           {
 *              부정연산자 / 비교연산자 / 논리연산자만 사용이 가능
 *           }
 *           
 *           선택조거문 : true/false를 나눠서 처리
 *           if(조건문)
 *           {
 *              조건 -> true 일때 처리
 *           }
 *           else
 *           {
 *              조건 -> false일때 처리
 *           }
 *           -> 한줄로 줄인다 -> 삼항연산자
 *           -> 다중조건문 : 한줄로 되어 있다 / 해당 조건만 수행
 *    반복문
 *        for문
 *        for each(웹에서 출력용)
 *           주의점 : 데이터형 변수는 형변환이 불가능
 *        while : 반복횟수가 지정이 않된 경우
 *                파일 읽기, 데이터베이스(오라클) 읽기)
 *                형식)
 *                   while(rs.next())
 *                   {
 *                      오라클 데이터 읽기
 *                   }
 *                   
 *                   while(st.hasMoreTokens())
 *                   {
 *                      -> 단어별 구분
 *                   }
 *    반복제어문 : break -> 반복문을 중단할때 사용
 *              **자신의 반복문만 중단이 가능
 *    --------------------------------------------
 *    메소드 
 *         1) 한가지 기능만 수행이 가능(재사용 목적)
 *         2) 반복 수행을 제거
 *         3) 구조적인 프로그램을 만들때 사용
 *            단락별 처리 / 에러처리 / 수정시에 처리
 *         형식)
 *             [접근지정어] [옵션] 리턴형 메소드명(매개변수 목록):선언문
 *             {
 *                구현부
 *             }
 *             접근지정어는 다른 통신을 담당 -> 공개(public)
 *             옵션 => static / abstract 선언부만 사용
 *             
 *             리턴형 : 결과값(처리) 1개만 사용
 *                    ***결과값이 없으면 void
 *                    ***리턴형으로 사용은 1. 기본데이터형 / 2. 클래스 / 3. 배열
 *             매개변수 : 사용자 요청값 -> 여러개 사용이 가능
 *                     *** 3개이상이면 배열, 클래스로 받는다
 *                     매개변수는 적은게좋음
 *             리턴형 메소드명(매개변수)
 *             {
 *                return -> void일때는 생략이 가능
 *                return 값 -> 값은 리턴형 데이터와 동일하게 만든다 / 단 리턴형이 더 클 수 있다.
 *             }
 *             
 *             
 *    
 *   
 *   
 */

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
